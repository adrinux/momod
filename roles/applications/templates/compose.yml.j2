---

version: '3.7'

networks:
  frontend:
    name: frontend

services:

  traefik:
    container_name: 'traefik'
    image: traefik:latest
    labels:
      traefik.enable: 'true'
      traefik.http.routers.traefik.entrypoints: 'http'
      traefik.http.routers.traefik.rule: "Host(`{{ traefik_domain }}`)"
      traefik.http.routers.traefik.middlewares: 'redirect@file'
      traefik.http.routers.traefik-secure.entrypoints: 'https'
      traefik.http.routers.traefik-secure.rule: "Host(`{{ traefik_domain }}`)"
      traefik.http.routers.traefik-secure.middlewares: 'traefik-auth@file'
      traefik.http.routers.traefik-secure.tls: 'true'
    volumes:
      - source: '/data/momod/traefik_data/traefik.toml'
        target: '/traefik.toml'
        type: 'bind'
        read_only: 'yes'
      - source: '/data/momod/traefik_data/dynamic_conf.toml'
        target: '/dynamic_conf.toml'
        type: 'bind'
      - source: '/data/momod/certbot/cert.pem'
        target: '/cert.pem'
        type: 'bind'
        read_only: 'yes'
      - source: '/data/momod/certbot/key.pem'
        target: '/key.pem'
        type: 'bind'
        read_only: 'yes'
      - source: '/run/docker.sock'
        target: '/run/docker.sock'
        type: 'bind'
        read_only: 'yes'
    networks:
      - 'default'
      - 'frontend'
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    expose:
      - "8080"
    restart: unless-stopped
    environment:
      - PUID={{ compose_user_uid }}
      - PGID={{ compose_user_gid }}


  {# portainer:
    container_name: 'portainer'
    image: portainer/portainer-ce
    environment:
      - PUID={{ compose_user_uid }}
      - PGID={{ compose_user_gid }}
    command: '-H unix:///run/docker.sock'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.portainer.rule: "Host(`portainer.{{ traefik_domain }}`)"
      traefik.http.routers.portainer.tls: 'true'
      traefik.http.services.portainer.loadbalancer.server.port: 9000
    volumes:
      - source: "/data/momod/portainer_data"
        target: '/data'
        type: 'bind'
      - source: '/run/docker.sock'
        target: '/run/docker.sock'
        type: 'bind'
        read_only: 'yes'
    networks:
      - 'default'
      - 'frontend'
    ports:
      - "9000:9000"
      - "8000:8000"
    restart: unless-stopped #}

  # Cleans up unused images
  {# dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    restart: "{{ restart_policy }}"
    volumes:
      - source: '/run/docker.sock'
        target: '/run/docker.sock'
        type: 'bind'
        read_only: 'yes'
    environment:
      - CRON=0 6 * * *
      - FORCE_IMAGE_REMOVAL=1
      - FORCE_CONTAINER_REMOVAL=1
      - GRACE_PERIOD_SECONDS=10800
      - DRY_RUN=0
      - CLEAN_UP_VOLUMES=0 #}


### End essential  services ###
